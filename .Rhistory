bind_cols(idxs_next_urban_centers[,c("distance"), drop=F])
data_final = cbind(data_sel_gemeinden, data_sel_next_centroids)
# convert to m ------------------------------------------------------------
data_final %>%
mutate(
distance = round(distance / 1000, 0)
) -> data_final
data_final %>%
st_drop_geometry() %>%
rename(
id_gem = id,
id_urban = id.1
) %>% left_join(data_all_gemeinden_vienna, by=c("id_urban" = "id")) %>%
rename(
name = `name.x` ,
name_urban = `name.y`
) %>%
st_as_sf() %>%
st_centroid() %>%
st_transform(crs=4326)-> data_next_center_sf
data_next_center_sf
out_path = here("output/data_next_center_sf.geojson")
if(file.exists(out_path)) file.remove(out_path)
st_write(data_next_center_sf, out_path)
library(jsonlite)
library(tidyverse)
library(glue)
library(here)
# paths -------------------------------------------------------------------
path_income = here("output/income_2020.csv")
path_age = here("output/age_2021.csv")
# vars --------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# data --------------------------------------------------------------------
data = readr::read_delim(path_data, skip = 8, delim = ";") %>% select(!matches("\\.\\.\\.")) %>%
rename(income_2020 = 3)
# path --------------------------------------------------------------------
path_data = here("data_raw/income/lohnsteuerstatistik-jahresbruttobezug.csv")
path_bev = here("data_raw/income/bevölkerungsstand_2020.csv")
# vars --------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# data --------------------------------------------------------------------
data = readr::read_delim(path_data, skip = 8, delim = ";") %>% select(!matches("\\.\\.\\.")) %>%
rename(income_2020 = 3)
bev = readr::read_delim(path_bev, skip = 8, delim = ";")%>% select(!matches("\\.\\.\\.")) %>%
rename(bev = Wert)
data = left_join(data, bev, by=c("ID", "Name")) %>%
filter(!is.na(bev))
datae
data
data %>%
mutate(
mean_income_oe = weighted.mean(income_2020, bev)
) -> data_mean_oe
data_mean_oe %>%
filter(ID %in% gemeinden_ids) %>%
select(ID, Name, income_2020, mean_income_oe) %>%
bind_rows(
list(ID = 1, Name = "Österreich", income_2020=.$mean_income_oe[[1]])
) %>% rename(gemeinde = Name) %>% select(gemeinde, income_2020) -> data_clean
data_clean
# write -------------------------------------------------------------------
readr::write_csv(data_clean, here("output/income_2020.csv"))
# paths -------------------------------------------------------------------
path_income = here("output/income_2020.csv")
library(tidyverse)
library(glue)
library(here)
# path --------------------------------------------------------------------
path_data = here("data_raw/income/lohnsteuerstatistik-jahresbruttobezug.csv")
path_bev = here("data_raw/income/bevölkerungsstand_2020.csv")
# vars --------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# data --------------------------------------------------------------------
data = readr::read_delim(path_data, skip = 8, delim = ";") %>% select(!matches("\\.\\.\\.")) %>%
rename(income_2020 = 3)
bev = readr::read_delim(path_bev, skip = 8, delim = ";")%>% select(!matches("\\.\\.\\.")) %>%
rename(bev = Wert)
data = left_join(data, bev, by=c("ID", "Name")) %>%
filter(!is.na(bev))
data %>%
mutate(
mean_income_oe = weighted.mean(income_2020, bev)
) -> data_mean_oe
data_mean_oe %>%
filter(ID %in% gemeinden_ids) %>%
select(ID, Name, income_2020, mean_income_oe) %>%
bind_rows(
list(ID = 1, Name = "Österreich", income_2020=.$mean_income_oe[[1]])
) %>% rename(gemeinde = Name) %>% select(gemeinde, income_2020) -> data_clean
# write -------------------------------------------------------------------
readr::write_csv(data_clean, here("output/income_2020.csv"))
data_clean
library(tidyverse)
library(glue)
library(here)
# path --------------------------------------------------------------------
path_data = here("data_raw/age/bevölkerung_nach_alter.csv")
path_bev = here("data_raw/age/bev_2021.csv")
# vars --------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# data --------------------------------------------------------------------
data = readr::read_delim(path_data, skip = 8, delim = ";") %>% select(!matches("\\.\\.\\.")) %>%
rename(age = Wert)
bev = readr::read_delim(path_bev, skip = 8, delim = ";")%>% select(!matches("\\.\\.\\.")) %>%
rename(bev = Wert)
data = left_join(data, bev, by=c("ID", "Name"))
data %>%
mutate(
mean_age = weighted.mean(age, bev)
) -> data_mean_oe
data_mean_oe %>%
filter(ID %in% gemeinden_ids) %>%
select(ID, Name, age, mean_age) %>%
bind_rows(
list(ID = 1, Name = "Österreich", age=.$mean_age[[1]])
) %>% rename(gemeinde = Name) %>%
select(gemeinde, age) -> data_clean
data_clean
# write -------------------------------------------------------------------
readr::write_csv(data_clean, here("output/age_2021.csv"))
path_pendler = here("data_raw/pendler/gemeindedaten - pendler.csv") # download from google
paths = list(path_income, path_age, path_geo, path_pendler, path_gleichstellung)
path_geo = here("data_raw/geo/gemeindedaten - geo.csv") # local process and download from google
path_gleichstellung = here("data_raw/gleichstellung/gemeindedaten - gleichstellung.csv") # download from google
path_pendler = here("data_raw/pendler/gemeindedaten - pendler.csv") # download from google
paths = list(path_income, path_age, path_geo, path_pendler, path_gleichstellung)
# deinfe output -----------------------------------------------------------
path_output_dir = here("output/json"); if(!dir.exists(path_output_dir)) dir.create(path_output_dir)
# read em all in ----------------------------------------------------------
data = purrr::map(paths, function(x){
basename = basename(x) %>% gsub(".* (.*)\\.[a-z]*$", "\\1", x = .)
data = readr::read_csv(x)
data = data %>%
mutate(
across(2:ncol(.), as.character)
)
# pivot longer each data
data_long =  data %>% pivot_longer(cols = -c(gemeinde),
names_to = "variable",
values_to = "values")
data_long
# json = toJSON(data)
# path_outfile = here(path_output_dir, glue("{basename}.json"))
# write(json, path_outfile)
}) %>% bind_rows()
data
data_wide = pivot_wider(data, names_from = variable, values_from = values) %>%
mutate(
across(-c(gemeinde, next_urban_center), as.numeric)
)
data_wide
data_wide = data_wide %>%
mutate(
next_urban_center = glue::glue("{next_urban_center} ({next_urban_center_dist} km)"),
next_urban_center = ifelse(gemeinde == "Österreich", NA, next_urban_center)
)
data_wide
path_outfile = here(path_output_dir, glue("data_all_wide.json"))
data_json = toJSON(data)
data_wide_json = toJSON(data_wide)
write(data_wide_json, path_outfile)
library(here)
library(tidyverse)
library(glue)
# paths -------------------------------------------------------------------
path_gemeinden = here("data_raw/gemeinden_geo/STATISTIK_AUSTRIA_GEM_20220101.shp")
# source gemeinden --------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# select gemeinden --------------------------------------------------------
gemeinden_geo %>%
filter(
id %in% gemeinden_ids
)
# select gemeinden --------------------------------------------------------
gemeinden_geo %>%
filter(
id %in% gemeinden_ids
) %>% st_centroid()
# select gemeinden --------------------------------------------------------
gemeinden_geo %>%
filter(id %in% gemeinden_ids) %>%
mutate(sqkm = st_area(geometry))
# select gemeinden --------------------------------------------------------
gemeinden_geo %>%
filter(id %in% gemeinden_ids) %>%
mutate(sqkm = st_area(geometry) / 100000) %>%
mutate
# select gemeinden --------------------------------------------------------
gemeinden_geo %>%
filter(id %in% gemeinden_ids) %>%
mutate(sqkm = st_area(geometry) / 1000000) %>%
mutate
# select gemeinden --------------------------------------------------------
gemeinden_geo %>%
filter(id %in% gemeinden_ids) %>%
mutate(sqkm = st_area(geometry) / 1000000) %>%
st_centroid()
# select gemeinden --------------------------------------------------------
centroids = gemeinden_geo %>%
filter(id %in% gemeinden_ids) %>%
mutate(sqkm = st_area(geometry) / 1000000) %>%
st_centroid()
st_write(centroids, here("output/gemeinden_centroids.json"))
install.packages("geojsonio")
st_write(centroids, here("output/gemeinden_centroids.geojson"))
st_coordinates(centroids)
# select gemeinden --------------------------------------------------------
centroids = gemeinden_geo %>%
filter(id %in% gemeinden_ids) %>%
mutate(sqkm = st_area(geometry) / 1000000) %>%
st_centroid() %>%
st_transform(4326)
st_coordinates(centroids)
st_write(centroids, here("output/gemeinden_centroids.geojson"))
path_out = here("output/gemeinden_centroids.geojson")
unlink(path_out)
st_write(centroids, path_out)
data_wide_json
data_wide
data_wide %>% filter(gemeinde == "Japons")
data_wide %>% filter(gemeinde == "Japons") %>% glimpse
library(tidyverse)
library(glue)
library(here)
# path --------------------------------------------------------------------
path_data = here("data_raw/age/bevölkerung_nach_alter.csv")
path_bev = here("data_raw/age/bev_2021.csv")
# vars --------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# data --------------------------------------------------------------------
data = readr::read_delim(path_data, skip = 8, delim = ";") %>% select(!matches("\\.\\.\\.")) %>%
rename(age = Wert)
data
library(tidyverse)
library(glue)
library(here)
# path --------------------------------------------------------------------
path_data = here("data_raw/age/bevölkerung_nach_alter.csv")
path_bev = here("data_raw/age/bev_2021.csv")
# vars --------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
path_bev = here("data_raw/age/bev_2021.csv")
# vars --------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# data --------------------------------------------------------------------
data = readr::read_delim(path_data, skip = 8, delim = ";") %>% select(!matches("\\.\\.\\.")) %>%
rename(age = Wert)
bev = readr::read_delim(path_bev, skip = 8, delim = ";")%>% select(!matches("\\.\\.\\.")) %>%
rename(bev = Wert)
data = left_join(data, bev, by=c("ID", "Name"))
data
# path --------------------------------------------------------------------
path_data = here("data_raw/age/bevölkerung_nach_alter.csv")
path_bev = here("data_raw/age/bev_2022.csv")
# data --------------------------------------------------------------------
data = readr::read_delim(path_data, skip = 8, delim = ";") %>% select(!matches("\\.\\.\\.")) %>%
rename(age = Wert)
data
# path --------------------------------------------------------------------
path_data = here("data_raw/age/bevölkerung_nach_alter_2022.csv")
path_bev = here("data_raw/age/bev_2022.csv")
# vars --------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# data --------------------------------------------------------------------
data = readr::read_delim(path_data, skip = 8, delim = ";") %>% select(!matches("\\.\\.\\.")) %>%
rename(age = Wert)
data
bev = readr::read_delim(path_bev, skip = 8, delim = ";")%>% select(!matches("\\.\\.\\.")) %>%
rename(bev = Wert)
data = left_join(data, bev, by=c("ID", "Name"))
data %>%
mutate(
mean_age = weighted.mean(age, bev)
) -> data_mean_oe
data_mean_oe %>%
filter(ID %in% gemeinden_ids) %>%
select(ID, Name, age, mean_age) %>%
bind_rows(
list(ID = 1, Name = "Österreich", age=.$mean_age[[1]])
) %>% rename(gemeinde = Name) %>%
select(gemeinde, age) -> data_clean
data_clean
# write -------------------------------------------------------------------
readr::write_csv(data_clean, here("output/age_2021.csv"))
library(jsonlite)
library(tidyverse)
library(glue)
library(here)
# paths -------------------------------------------------------------------
path_income = here("output/income_2020.csv") # local process
# write -------------------------------------------------------------------
readr::write_csv(data_clean, here("output/age_2022.csv"))
# paths -------------------------------------------------------------------
path_income = here("output/income_2020.csv") # local process
path_age = here("output/age_2022.csv") # local process
path_geo = here("data_raw/geo/gemeindedaten - geo.csv") # local process and download from google
path_gleichstellung = here("data_raw/gleichstellung/gemeindedaten - gleichstellung.csv") # download from google
path_pendler = here("data_raw/pendler/gemeindedaten - pendler.csv") # download from google
paths = list(path_income, path_age, path_geo, path_pendler, path_gleichstellung)
# deinfe output -----------------------------------------------------------
path_output_dir = here("output/json"); if(!dir.exists(path_output_dir)) dir.create(path_output_dir)
# read em all in ----------------------------------------------------------
data = purrr::map(paths, function(x){
basename = basename(x) %>% gsub(".* (.*)\\.[a-z]*$", "\\1", x = .)
data = readr::read_csv(x)
data = data %>%
mutate(
across(2:ncol(.), as.character)
)
# pivot longer each data
data_long =  data %>% pivot_longer(cols = -c(gemeinde),
names_to = "variable",
values_to = "values")
data_long
# json = toJSON(data)
# path_outfile = here(path_output_dir, glue("{basename}.json"))
# write(json, path_outfile)
}) %>% bind_rows()
data_wide = pivot_wider(data, names_from = variable, values_from = values) %>%
mutate(
across(-c(gemeinde, next_urban_center), as.numeric)
)
data_wide = data_wide %>%
mutate(
next_urban_center = glue::glue("{next_urban_center} ({next_urban_center_dist} km)"),
next_urban_center = ifelse(gemeinde == "Österreich", NA, next_urban_center)
)
path_outfile = here(path_output_dir, glue("data_all_wide.json"))
data_json = toJSON(data)
data_wide_json = toJSON(data_wide)
write(data_wide_json, path_outfile)
data_wide
# path --------------------------------------------------------------------
path_data = here("data_raw/age/bevölkerung_nach_alter_2022.csv")
path_bev = here("data_raw/age/bev_2022.csv")
# vars --------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# data --------------------------------------------------------------------
data = readr::read_delim(path_data, skip = 8, delim = ";") %>% select(!matches("\\.\\.\\.")) %>%
rename(age = Wert)
bev = readr::read_delim(path_bev, skip = 8, delim = ";")%>% select(!matches("\\.\\.\\.")) %>%
rename(bev = Wert)
data = left_join(data, bev, by=c("ID", "Name"))
data %>%
mutate(
mean_age = weighted.mean(age, bev)
) -> data_mean_oe
data_mean_oe %>%
filter(ID %in% gemeinden_ids) %>%
select(ID, Name, age, mean_age) %>%
bind_rows(
list(ID = 1, Name = "Österreich", age=.$mean_age[[1]])
) %>% rename(gemeinde = Name) %>%
select(gemeinde, age) -> data_clean
data_clean
library(tidyverse)
library(here)
library(glue)
library(sf)
library(readxl)
library(jsonlite)
# path --------------------------------------------------------------------
path_bev = here("data_raw/population/bevoelkerung_zu_jahresbeginn_2002-2022_nach_gemeinden_.xlsx")
# data --------------------------------------------------------------------
data = read_xlsx(path_bev, skip = 2)
# ids ---------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# clean -------------------------------------------------------------------
data %>%
rename(gkz = 1,
name = 2) %>%
filter(gkz %in% gemeinden_ids |
gkz == "ÖSTERREICH") %>%
pivot_longer(cols = matches("\\d{4}"),
names_to = "year",
values_to = "bev") %>%
mutate(year = substr(year, 1, 4)) %>%
mutate(name = ifelse(gkz == "ÖSTERREICH", "Österreich", name)) -> data_clean
data_clean
data_clean %>% count(gkz)
write.csv(data_clean, here("../../aug/2022-04-gemeinden-portraete/public/data/bev.csv"))
# path --------------------------------------------------------------------
path_data = here("data_raw/income/lohnsteuerstatistik-jahresbruttobezug.csv")
path_bev = here("data_raw/income/bevölkerungsstand_2020.csv")
# vars --------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# data --------------------------------------------------------------------
data = readr::read_delim(path_data, skip = 8, delim = ";") %>% select(!matches("\\.\\.\\.")) %>%
rename(income_2020 = 3)
bev = readr::read_delim(path_bev, skip = 8, delim = ";")%>% select(!matches("\\.\\.\\.")) %>%
rename(bev = Wert)
data = left_join(data, bev, by=c("ID", "Name")) %>%
filter(!is.na(bev))
data %>%
mutate(
mean_income_oe = weighted.mean(income_2020, bev)
) -> data_mean_oe
data_mean_oe %>%
filter(ID %in% gemeinden_ids) %>%
select(ID, Name, income_2020, mean_income_oe) %>%
bind_rows(
list(ID = 1, Name = "Österreich", income_2020=.$mean_income_oe[[1]])
) %>% rename(gemeinde = Name) %>% select(gemeinde, income_2020) -> data_clean
data_clean
data %>%
mutate(
mean_income_oe = weighted.mean(income_2020, bev)
) -> data_mean_oe
data_mean_oe
data_clean
library(tidyverse)
library(here)
library(glue)
library(sf)
library(readxl)
library(jsonlite)
# path --------------------------------------------------------------------
path_bev = here("data_raw/population/bevoelkerung_zu_jahresbeginn_2002-2022_nach_gemeinden_.xlsx")
# data --------------------------------------------------------------------
data = read_xlsx(path_bev, skip = 2)
# ids ---------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# clean -------------------------------------------------------------------
data %>%
rename(gkz = 1,
name = 2) %>%
filter(gkz %in% gemeinden_ids |
gkz == "ÖSTERREICH") %>%
pivot_longer(cols = matches("\\d{4}"),
names_to = "year",
values_to = "bev") %>%
mutate(year = substr(year, 1, 4)) %>%
mutate(name = ifelse(gkz == "ÖSTERREICH", "Österreich", name)) -> data_clean
data_clean
write.csv(data_clean, here("../../aug/2022-04-gemeinden-portraete/public/data/bev.csv"))
write.csv(data_clean, here("../../aug/2022-08-gemeinde-portraete/public/data/bev.csv"))
data_clean
data_clean %>% View
library(tidyverse)
library(here)
library(glue)
library(sf)
library(readxl)
library(jsonlite)
# path --------------------------------------------------------------------
path_bev = here("data_raw/population/bevoelkerung_zu_jahresbeginn_2002-2022_nach_gemeinden_.xlsx")
# data --------------------------------------------------------------------
data = read_xlsx(path_bev, skip = 2)
# ids ---------------------------------------------------------------------
source(here("analysis/selected_gemeinden.R"))
# clean -------------------------------------------------------------------
data %>%
rename(gkz = 1,
name = 2) %>%
filter(gkz %in% gemeinden_ids |
gkz == "ÖSTERREICH") %>%
pivot_longer(cols = matches("\\d{4}"),
names_to = "year",
values_to = "bev") %>%
mutate(year = substr(year, 1, 4)) %>%
mutate(name = ifelse(gkz == "ÖSTERREICH", "Österreich", name)) -> data_clean
write.csv(data_clean, here("../../aug/2022-08-gemeinde-portraete/public/data/bev.csv"))
seq(as.Date("2020-01-01"), 4)
seq(4, as.Date("2020-01-01"))
date = as.Date("2020-01-01")
data.frame(
dates = seq(date, date+2)
)
data.frame(
dates = seq(date, date+2, by="day")
)
date = as.Date("2020-01-01")
df = data.frame(
dates = seq(date, date+2, by="day"),
vals = c(1,2,3),
vals2 = c(2,3,4)
)
df
df %>%
group_by(date) %>%
summarise(
across(
where(is.numeric)
),
mean
)
df = data.frame(
date = seq(date, date+2, by="day"),
vals = c(1,2,3),
vals2 = c(2,3,4)
)
df %>%
group_by(date) %>%
summarise(
across(
where(is.numeric)
),
mean
)
df %>%
group_by(date) %>%
summarise(across(where(is.numeric)
mean))
df %>%
group_by(date) %>%
summarise(across(where(is.numeric),
mean))
df %>%
group_by(date) %>%
summarise(across(where(is.numeric),
~mean(.x)))
